# -*- coding: utf-8 -*-
"""
/***************************************************************************
 vgle
                                 A QGIS plugin
 This plugin groups framgented poylgons together.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-07-01
        git sha              : $Format:%H$
        copyright            : (C) 2024 by GOPA
        email                : gudmandras@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,  QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, Qgis, QgsLayerTree, QgsLayerTreeLayer, QgsField, QgsVectorFileWriter, QgsVectorLayer, QgsExpression
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .polygon_grouper_dialog import vgleDialog
import os.path
import processing
import itertools
import logging
from datetime import datetime
import time, copy, uuid


class vgle:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'vgle_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&VGLE')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('vgle', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/polygon_grouper/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Polygon grouper'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&VGLE'),
                action)
            self.iface.removeToolBarIcon(action)

    def fill_attributes(self, layer):
        self.dlg.mComboBox_2.clear()
        attributes = layer.fields()
        for attr in attributes:
            self.dlg.mComboBox_2.addItemWithCheckState(str(attr.name()), 0)

    def set_progress_bar(self, value):
        self.dlg.progressBar.setValue(value)

    def start_logging(self, layer, directory):
        path = os.path.join(directory, f"{str(layer.name())}_log.txt")
        formatter = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        logging.basicConfig(filename=path, level=logging.DEBUG, format=formatter)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = vgleDialog()

        try:
            self.dlg.mMapLayerComboBox.setLayer(list(QgsProject.instance().mapLayers().values())[0])
            if self.dlg.mMapLayerComboBox.currentLayer():
                self.fill_attributes(self.dlg.mMapLayerComboBox.currentLayer())
        except IndexError:
            pass

        self.dlg.mMapLayerComboBox.layerChanged.connect(self.dlg.mFieldComboBox_2.setLayer)
        self.dlg.mMapLayerComboBox.layerChanged.connect(lambda:
           self.fill_attributes(self.dlg.mMapLayerComboBox.currentLayer()))

        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed



        if result:
            #Set progress bar
            #self.dlg.progressBar.setRange(minimum, maximum)
            #Get inputs
            field0 = self.dlg.mMapLayerComboBox.currentText()
            field1 = self.dlg.checkBox.checkState()
            field2 = self.dlg.mComboBox_2.checkedItems()
            field3 = self.dlg.mFieldComboBox_2.currentField()
            self.weight = field3
            field4 = self.dlg.mQgsSpinBox.value()
            self.tolerance = field4
            field5 = self.dlg.mQgsFileWidget.filePath()
            field6 = self.dlg.mQgsSpinBox_2.value()
            self.distance = field6

            input_layer = QgsProject().instance().mapLayersByName(field0)[0]
            self.start_logging(input_layer,field5)

            main_start_time = time.time()
            logging.debug(f'Start time: {datetime.now().strftime("%Y_%m_%d_%H_%M")}')
            logging.debug(f'Input layer: {field0}')
            if field1 == 2:
                logging.debug(f'Preference to selected items: True')
            logging.debug(f'Holder atrribute(s): {field2}')
            logging.debug(f'Weight attribute: {field3}')
            logging.debug(f'Tolerance: {str(field4)}')
            logging.debug(f'Output dir: {str(field5)}')

            temp_layer = self.create_temp_layer(input_layer, field5)

            layer, self.holder_attribute = self.set_holder_field(temp_layer, field2)
            holders_with_holdings = self.get_holders_holdings(layer)
            layer, self.id_attribute, holders_with_holdings = self.create_id_field(layer, holders_with_holdings)
            holdings_with_area = self.get_holdings_areas(layer, field3)
            self.holder_total_area = self.calculate_total_area(holders_with_holdings, holdings_with_area)
            self.determine_seed_polygons(holders_with_holdings, holdings_with_area, field1, layer)

            swaped_layer = self.swap_iteration(layer,holders_with_holdings,holdings_with_area)

            QgsProject.instance().addMapLayer(layer, False)
            root = QgsProject().instance().layerTreeRoot()
            root.insertLayer(0, swaped_layer)
            main_end_time = time.time()
            logging.debug(f'Script time:{main_end_time-main_start_time}')

    def create_temp_layer(self, layer, directory):
        path = os.path.join(directory,f"{str(layer.name())}_result.shp")
        if os.path.isfile(path):
            QgsVectorFileWriter.deleteShapeFile(path)
        options = QgsVectorFileWriter.SaveVectorOptions()
        options.driverName = "ESRI Shapefile"
        options.fileEncoding = "UTF-8"
        context = QgsProject.instance().transformContext()
        QgsVectorFileWriter.writeAsVectorFormatV2(layer, path, context, options)
        temp_layer = QgsVectorLayer(path, "Work layer", "ogr")
        return temp_layer

    def set_holder_field(self, layer, field1):
        if len(field1) == 1:
            return layer, field1[0]
        else:
            layer, field_name = self.set_temp_holder_field(layer)
            QgsProject.instance().addMapLayer(layer, False)
            root = QgsProject().instance().layerTreeRoot()
            root.insertLayer(0, layer)
            layer = self.set_temp_holder_value(layer, field_name, field1)
            return layer, field_name

    def set_temp_holder_field(self, layer):
        field_name = 'holder_id'
        layer_attributes = self.get_attributes_names(layer)
        if field_name in layer_attributes:
            counter = 0
            while field_name in layer_attributes:
                field_name = f"{field_name}{counter}"
                counter += 1
        layer.startEditing()
        data_provider = layer.dataProvider()
        data_provider.addAttributes([QgsField(field_name, QVariant.Int)])
        layer.updateFields()
        return layer, field_name

    def get_attributes_names(self, layer):
        attributes = [field.name() for field in layer.fields()]
        return attributes

    def set_temp_holder_value(self, layer, field_name, attributes):
        field_name_id = [turn for turn, field in enumerate(layer.fields()) if field.name() == field_name][0]
        big_list = []
        features = layer.getFeatures()
        for turn, feature in enumerate(features):
            tempList = []
            for attr in attributes:
                value = feature.attribute(attr)
                logging.debug(value)
                if value is not None:
                    logging.debug(value)
                    tempList.append(value)
            temp_string = ''
            for turn, tmp in enumerate(tempList):
                if len(tempList) > 1:
                    if tmp != '' and tmp != 'NULL':
                        if tmp != tempList[-1]:
                            temp_string += f'{tmp},'
                        else:
                            temp_string += f'{tmp}'
                        if len(temp_string) > 0:
                            if temp_string not in big_list:
                                big_list.append(temp_string)
                else:
                    if tmp and tmp != '' and tmp != 'NULL':
                        if temp_string not in big_list:
                            temp_string += f'{tmp}'
        logging.debug(big_list)
        counter = 1
        for lista in big_list:
            expression = ''
            list_unique = lista.split(',')
            logging.debug(list_unique)
            for turn, unique in enumerate(list_unique):
                if unique != '' and unique != 'NULL':
                    if type(unique) == str:
                        if turn+1 != len(list_unique):
                            expression += '"{field}"=\'{value}\' AND '.format(field=attributes[turn],value=str(unique))
                        else:
                            expression += '"{field}"=\'{value}\''.format(field=attributes[turn],value=str(unique))
                    else:
                        if turn+1 != len(list_unique):
                            expression += '"{field}"={value} AND '.format(field=attributes[turn],value=str(unique))
                        else:
                            expression += '"{field}"={value}'.format(field=attributes[turn],value=str(unique))
            logging.debug(expression)
            layer.selectByExpression(expression)
            selected_features = layer.selectedFeatures()
            if layer.selectedFeatureCount() > 0:
                counter += 1
                if (layer.isEditable() == False):
                    layer.startEditing()
                for feature in selected_features:
                    layer.changeAttributeValue(feature.id(),field_name_id,counter)
                layer.commitChanges()
                layer.removeSelection()

        return layer

    def create_id_field(self, layer, holders):
        field_name = 'temp_id'
        layer_attributes = self.get_attributes_names(layer)
        if field_name in layer_attributes:
            counter = 0
            while field_name in layer_attributes:
                field_name = f"{field_name}{counter}"
                counter += 1
        layer.startEditing()
        data_provider = layer.dataProvider()
        data_provider.addAttributes([QgsField(field_name, QVariant.String, len=50)])
        layer.updateFields()
        layer, holders_with_holding_id = self.set_id_field(layer, field_name, holders)
        return layer, field_name, holders_with_holding_id

    def set_id_field(self, layer, attribute, holders):
        attribute_id = self.get_attributes_names(layer).index(attribute)
        holders_with_holding_id = {}
        if (layer.isEditable() == False):
            layer.startEditing()
        for holder, holdings in holders.items():
            counter = 0
            for feature_id in holdings:
        #        new_id = f'{str(holder)}/{counter}'
                new_id = str(uuid.uuid4())
                layer.changeAttributeValue(feature_id,attribute_id,new_id)
                counter += 1
                if holder in list(holders_with_holding_id.keys()):
                    holders_with_holding_id[holder].append(new_id)
                else:
                    holders_with_holding_id[holder] = list()
                    holders_with_holding_id[holder].append(new_id)
        layer.commitChanges()
        return layer, holders_with_holding_id

    def get_holders_holdings(self, layer):
        holders_with_holdings = {}
        features = layer.getFeatures()
        for feature in features:
            feature_id = feature.id()
            holder = feature.attribute(self.holder_attribute)
            if holder in list(holders_with_holdings.keys()):
                holders_with_holdings[holder].append(feature_id)
            else:
                holders_with_holdings[holder] = [feature_id]
        return holders_with_holdings

    def calculate_total_area(self, holders_with_holdings, holdings_with_area):
        holder_total_area = {}
        for holder, holdings in holders_with_holdings.items():
            total_area = 0
            for holding in holdings:
                total_area += holdings_with_area[holding]
            holder_total_area[holder] = total_area
        return holder_total_area

    def get_holdings_areas(self, layer,  area_id):
        holdings_with_areas = {}
        features = layer.getFeatures()
        for feature in features:
            area = feature.attribute(area_id)
            holding_id = feature.attribute(self.id_attribute)
            holdings_with_areas[holding_id] = area
        return holdings_with_areas

    def determine_seed_polygons(self, holders_with_holdings, holdings_with_area, check, layer):
        holders_with_seeds = {}
        if check == 2:
            selfeatures = layer.selectedFeatures()
            for feature in selfeatures:
                holder_value = feature.attribute(self.holder_attribute)
                id_value = feature.attribute(self.id_attribute)
                if holder_value not in list(holders_with_seeds.keys()):
                    holders_with_seeds[holder_value] = [id_value]
                else:
                    holders_with_seeds[holder_value].append(id_value)
        for holder, holdings in holders_with_holdings.items():
            if holder not in list(holders_with_seeds.keys()):
                largest_area = 0
                largest_feature_id = ''
                for holding in holdings:
                    area_value = holdings_with_area[holding]
                    if largest_area < area_value:
                        largest_area = area_value
                        largest_feature_id = holding
                holders_with_seeds[holder] = [largest_feature_id]
        self.seeds = holders_with_seeds

    def swap_iteration(self, layer, holders_with_holdings, holdings_with_areas):
        changes = 1
        turn = 0
        self.global_changables = self.get_changable_holdings(holders_with_holdings)
        local_total_areas = copy.deepcopy(self.holder_total_area)
        while changes != 0:
            turn += 1
            if turn==1:
                logging.debug(
                    f"Turn {turn - 1}'s fraction number: {len(list(holdings_with_areas.keys())) / len(list(holders_with_holdings.keys()))}")
                layer, changed, local_total_areas = self.swap(
                    layer, holders_with_holdings, holdings_with_areas, local_total_areas, turn)
            else:
                layer, holders_with_holdings, holdings_with_areas = self.prepare_new_turn(layer)
                logging.debug(
                    f"Turn {turn - 1}'s fraction number: {len(list(holdings_with_areas.keys())) / len(list(holders_with_holdings.keys()))}")
                layer, changed, local_total_areas = self.swap(
                    layer, holders_with_holdings, holdings_with_areas, local_total_areas, turn)
        return layer

    def get_changable_holdings(self, holders_with_holdings, in_distance=None):
        changable_holdings = []
        for holder, holdings in holders_with_holdings.items():
            for holding in holdings:
                if holding not in self.seeds[holder]:
                    if in_distance:
                        if holding in in_distance:
                            changable_holdings.append(holding)
                    else:
                        changable_holdings.append(holding)
        return changable_holdings

    def swap(self, layer, holders_with_holdings, holdings_with_areas, total_areas, turn=1):
        self.counter = 0
        layer = self.set_turn_attributes(layer, turn)

        for holder, holdings in holders_with_holdings.items():
            seeds = self.seeds[holder]
            if len(seeds) == 1:
                ngh_ids, neighbours = self.get_neighbours(layer, seeds)
                in_distance = self.distance_search(layer, seeds)
                distance_changes = self.get_changable_holdings(holders_with_holdings, in_distance)
                local_changables = [dist for dist in distance_changes if dist in self.global_changables]
                layer, changables, total_areas = self.search_for_changes(layer, seeds[0], holders_with_holdings, holdings_with_areas, local_changables, ngh_ids, neighbours, total_areas)
                logging.debug(f'Changes in turn {turn}: {self.counter}')
            else:
                for seed in seeds:
                    ngh_ids, neighbours = self.get_neighbours(layer, seed)
                    in_distance = self.distance_search(layer, seed)
                    distance_changes = self.get_changable_holdings(holders_with_holdings, in_distance)
                    local_changables = [dist for dist in distance_changes if dist in self.global_changables]
                    layer, changables, total_areas = self.search_for_changes(layer, seed, holders_with_holdings, holdings_with_areas, local_changables, ngh_ids, neighbours, total_areas)
                logging.debug(f'Changes in turn {turn}: {self.counter}')

        return layer, self.counter, total_areas

    def get_neighbours(self, layer, seeds):
        expression = ''
        for turn, seed in enumerate(seeds):
            if turn == 0:
                expression += f'"{self.id_attribute}" = \'{seed}\''
            else:
                expression += f' OR "{self.id_attribute}" = \'{seed}\''
        layer.selectByExpression(expression)
        alg_params = {
            'INPUT': layer,
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
        seed_features = processing.run('native:saveselectedfeatures', alg_params)["OUTPUT"]
        alg_params = {
            'INPUT': layer,
            'INTERSECT': seed_features,
            'PREDICATE': 4,
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
        neighbours = processing.run('native:extractbylocation', alg_params)["OUTPUT"]
        layer.removeSelection()

        ngh_features = neighbours.getFeatures()
        nghs_ids = [x.attribute(self.id_attribute) for x in ngh_features]

        return nghs_ids, neighbours

    def distance_search(self, layer, seeds):
        search_items = []
        feats = [feat for feat in layer.getFeatures()]
        expression = ''
        for turn, seed in enumerate(seeds):
            if turn == 0:
                expression += f'"{self.id_attribute}" = \'{seed}\''
            else:
                expression += f' OR "{self.id_attribute}" = \'{seed}\''
        layer.selectByExpression(expression)
        sel_feat = layer.selectedFeatures()
        buffers = []
        for sel in sel_feat:
            geom_buffer = sel.geometry().buffer(self.distance, -1)
            buffers.append(geom_buffer)
        for feat in feats:
            for buff in buffers:
                if feat.geometry().intersects(buff):
                    search_items.append(feat.attribute(self.id_attribute))
        layer.removeSelection()
        return search_items

    def ids_for_change(self, holding_list, changables):
        try:
            ids = []
            for h_id in holding_list:
                if h_id in changables:
                    ids.append(h_id)
            return ids
        except ValueError:
            return None

    def search_for_changes(self, layer, seed, holders_with_holdings, holdings_with_areas, changables, ngh_ids, neighbours, total_areas):
        #Get holder name
        holder = [key for key, value in holders_with_holdings.items() if seed in value][0]
        #Get holder total area
        holder_total_area = total_areas[holder]
        #Get holders holdings
        holdings = [value[0] for key, value in holders_with_holdings.items() if key == holder]
        #Filter holdings
        holdings_ids = self.ids_for_change(holdings, changables)
        if holdings_ids:
            #Filter out nghs
            holdings_ids = [h_id for h_id in holdings_ids if h_id not in neighbours]
            print(neighbours)
            ngh_features = neighbours.getFeatures()
            for nghfeat in ngh_features:
                print(1)
                # Get ngh holder name
                ngh_holder = int(nghfeat.attribute(self.nholder_attribute))
                print(ngh_holder)
                # Get holder total area
                ngh_holder_total_area = total_areas[ngh_holder]
                # Get holders holdings
                ngh_holdings = [value[0] for key, value in holders_with_holdings.items() if key == ngh_holder]
                # Filter holdings
                ngh_holdings_ids = self.ids_for_change(ngh_holdings, changables)
                print(ngh_holdings_ids)
                if ngh_holdings_ids:
                    print('Van mire cserélni')
                    # Filter out nghs
                    ngh_holdings_ids = [h_id for h_id in ngh_holdings_ids if h_id not in ngh_ids]

                    ngh_feat_id = nghfeat.attribute(self.id_attribute)

                    holder_combinations = []
                    for L in range(len(holdings_ids) + 1):
                        for subset in itertools.combinations(holdings_ids, L):
                            if seed in subset:
                                holder_combinations.append(subset)

                    ngh_combinations = []
                    for L in range(len(ngh_holdings_ids) + 1):
                        for subset in itertools.combinations(ngh_holdings_ids, L):
                            if ngh_feat_id in subset:
                                ngh_combinations.append(subset)

                    holder_comb_totals = []
                    for comb in holder_combinations:
                        combo = [area for key, area in holdings_with_areas if key in comb]
                        list_combo = list(combo)
                        temp_area = sum(list_combo)
                        holder_comb_totals.append(temp_area)

                    ngh_holder_comb_totals = []
                    for comb in holder_combinations:
                        combo = [area for key, area in holdings_with_areas if key in comb]
                        list_combo = list(combo)
                        temp_area = sum(list_combo)
                        ngh_holder_comb_totals.append(temp_area)

                    total_areas_difference = []
                    holder_new_total_area = []
                    ngh_new_total_area = []
                    possible_holder_changes = []
                    possible_ngh_changes = []
                    for turn, holder_comb in holder_comb_totals:
                        for turnn, ngh_comb in ngh_holder_comb_totals:
                            new_holder_total_area = holder_total_area - holder_comb + ngh_comb
                            if new_holder_total_area > holder_total_area - (
                                    holder_total_area * (self.tolerance / 100)) and new_holder_total_area < holder_total_area + (
                                    holder_total_area * (self.tolerance / 100)):
                                print('First oké')
                                new_ngh_total_area = ngh_holder_total_area - ngh_comb + holder_comb
                                if new_ngh_total_area > ngh_holder_total_area - (
                                    ngh_holder_total_area * (self.tolerance / 100)) and new_ngh_total_area < ngh_holder_total_area + (
                                    ngh_holder_total_area * (self.tolerance / 100)):
                                    print('Second oké')
                                    total_areas_difference.append(new_holder_total_area-holder_total_area)
                                    holder_new_total_area.append(new_holder_total_area)
                                    ngh_new_total_area.append(new_ngh_total_area)
                                    possible_holder_changes.append(holder_combinations[holder_comb_totals.index(holder_comb)])
                                    possible_ngh_changes.append(ngh_combinations[ngh_holder_comb_totals.index(ngh_comb)])
                    print(possible_holder_changes)
                    if possible_holder_changes:
                        logging.debug(
                            f'Possible change(s) for {ngh_feat_id} as neighbour of {seed}: {possible_holder_changes}')
                        smallest = possible_holder_changes[total_areas_difference.index(min(total_areas_difference))]
                        ngh_cmbs = possible_ngh_changes[total_areas_difference.index(min(total_areas_difference))]
                        print(smallest)
                        print(ngh_cmbs)
                        if len(smallest) > 1 and len(ngh_cmbs) > 1:
                            #many to many change
                            for hold in smallest:
                                self.set_new_attribute(layer, hold, ','.join(ngh_cmbs), self.nid_attribute)
                                self.set_new_attribute(layer, hold, ngh_holder, self.nholder_attribute)
                                changables.pop(changables.index(hold))
                            for ngh in ngh_cmbs:
                                self.set_new_attribute(layer, ngh, ','.join(smallest), self.nid_attribute)
                                self.set_new_attribute(layer, ngh, holder, self.nholder_attribute)
                                changables.pop(changables.index(ngh))
                            self.global_changables.pop(self.global_changables.index(ngh_feat_id))
                            self.seeds[holder].append(ngh_feat_id)
                            total_areas[holder] = new_holder_total_area[total_areas_difference.index(min(total_areas_difference))]
                            total_areas[ngh_holder] = new_ngh_total_area[total_areas_difference.index(min(total_areas_difference))]
                            self.counter += 1
                            logging.debug(
                                f'Change {str(self.counter)} for {ngh_feat_id} (holder:{ngh_holder}) as neighbour of {seed} (holder:{holder}): {smallest} for {ngh_cmbs}')
                        elif len(smallest) > 1 and len(ngh_cmbs) == 1 or len(smallest) == 1 and len(ngh_cmbs) > 1:
                            #many to one change
                            if len(smallest) > 1:
                                for hold in smallest:
                                    self.set_new_attribute(layer, hold, ngh_cmbs[0], self.nid_attribute)
                                    self.set_new_attribute(layer, hold, ngh_holder, self.nholder_attribute)
                                    changables.pop(changables.index(hold))
                                self.set_new_attribute(layer, ngh_feat_id, ','.join(smallest), self.nid_attribute)
                                self.set_new_attribute(layer, ngh_feat_id, holder, self.nholder_attribute)
                                changables.pop(changables.index(ngh_feat_id))
                            else:
                                for ngh in ngh_cmbs:
                                    self.set_new_attribute(layer, ngh, smallest[0], self.nid_attribute)
                                    self.set_new_attribute(layer, ngh, holder, self.nholder_attribute)
                                    changables.pop(changables.index(ngh))
                                self.set_new_attribute(layer, smallest[0], ','.join(ngh_cmbs), self.nid_attribute)
                                self.set_new_attribute(layer, smallest[0], ngh_holder, self.nholder_attribute)
                                changables.pop(changables.index(smallest[0]))
                            self.global_changables.pop(self.global_changables.index(ngh_feat_id))
                            self.seeds[holder].append(ngh_feat_id)
                            total_areas[holder] = new_holder_total_area[total_areas_difference.index(min(total_areas_difference))]
                            total_areas[ngh_holder] = new_ngh_total_area[total_areas_difference.index(min(total_areas_difference))]
                            self.counter += 1
                            logging.debug(
                                f'Change {str(self.counter)} for {ngh_feat_id} (holder:{ngh_holder}) as neighbour of {seed} (holder:{holder}): {smallest} for {ngh_cmbs}')
                        else:
                            #one to one change
                            self.set_new_attribute(layer, hold, ngh_cmbs[0], self.nid_attribute)
                            self.set_new_attribute(layer, hold, ngh_holder, self.nholder_attribute)
                            self.set_new_attribute(layer, ngh_feat_id, smallest[0], self.nid_attribute)
                            self.set_new_attribute(layer, ngh_feat_id, holder, self.nholder_attribute)
                            changables.pop(changables.index(ngh_feat_id))
                            changables.pop(changables.index(smallest[0]))
                            self.global_changables.pop(self.global_changables.index(ngh_feat_id))
                            self.seeds[holder].append(ngh_feat_id)
                            total_areas[holder] = new_holder_total_area[total_areas_difference.index(min(total_areas_difference))]
                            total_areas[ngh_holder] = new_ngh_total_area[total_areas_difference.index(min(total_areas_difference))]
                            self.counter += 1
                            logging.debug(
                                f'Change {str(self.counter)} for {ngh_feat_id} (holder:{ngh_holder}) as neighbour of {seed} (holder:{holder}): {smallest} for {ngh_cmbs}')

        return layer, changables, total_areas

    def closer(self):
        pass

    def create_new_attribute(self, layer, turn, adj):
        field_name = f'{turn}_{adj}'
        layer_attributes = self.get_attributes_names(layer)
        if field_name in layer_attributes:
            counter = 0
            while field_name in layer_attributes:
                field_name = f"{field_name}{counter}"
                counter += 1
        layer.startEditing()
        data_provider = layer.dataProvider()
        data_provider.addAttributes([QgsField(field_name, QVariant.String,len=50)])
        layer.updateFields()
        return layer, field_name

    def set_new_attribute(self, layer, feature_id, new_value, field):
        expression = ''
        expression += f'"{self.id_attribute}" = \'{feature_id}\''
        layer.selectByExpression(expression)
        index = self.get_attributes_names(layer).index(field)
        layer.startEditing()
        for feature in layer.selectedFeatures():
            layer.changeAttributeValue(feature.id(), index, new_value)
        layer.commitChanges()

    def set_turn_attributes(self, layer, turn):
        layer, new_id = self.create_new_attribute(layer, turn, 'id')
        layer, new_holder = self.create_new_attribute(layer, turn, 'holder')
        if turn == 1:
            layer.startEditing()
            for feature in layer.getFeatures():
                layer.changeAttributeValue(feature.id(), self.get_attributes_names(layer).index(new_holder),
                                           str(feature.attribute(self.holder_attribute)))
            layer.commitChanges()
        else:
            layer.startEditing()
            for feature in layer.getFeatures():
                layer.changeAttributeValue(feature.id(), self.get_attributes_names(layer).index(new_holder),
                                           str(feature.attribute(self.nholder_attribute)))
            layer.commitChanges()
        self.nid_attribute = new_id
        self.nholder_attribute = new_holder
        return layer

    def prepare_new_turn(self, layer):
        holders_with_holdings = self.get_holders_holdings(layer)
        holdings_with_area = self.get_holdings_areas(layer, self.weight)
        return layer, holders_with_holdings, holdings_with_area

"""
def one_to_one_swap(self, layer, holders_with_holdings, holdings_with_areas, seed_polygons, total_areas, changables,
                    turn=1, holders_new_field=None):
    counter = 0
    layer, old_id = self.create_new_attribute(layer, turn, 'old')
    layer, new_id = self.create_new_attribute(layer, turn, 'new')
    layer, new_holder = self.create_new_attribute(layer, turn, 'h')
    if turn == 1:
        layer.startEditing()
        for feature in layer.getFeatures():
            layer.changeAttributeValue(feature.id(), self.get_attributes_names(layer).index(old_id), str(feature.attribute(self.id_attribute)))
            layer.changeAttributeValue(feature.id(), self.get_attributes_names(layer).index(new_id),
                                       str(feature.attribute(self.id_attribute)))
            layer.changeAttributeValue(feature.id(), self.get_attributes_names(layer).index(new_holder),
                                       str(feature.attribute(self.holder_attribute)))
        layer.commitChanges()
    else:
        layer.startEditing()
        for feature in layer.getFeatures():
            layer.changeAttributeValue(feature.id(), self.get_attributes_names(layer).index(old_id), str(feature.attribute(holders_new_field)))
            layer.changeAttributeValue(feature.id(), self.get_attributes_names(layer).index(new_id),
                                       str(feature.attribute(holders_new_field)))
            layer.changeAttributeValue(feature.id(), self.get_attributes_names(layer).index(new_holder),
                                       str(feature.attribute(self.holder_attribute)))
        layer.commitChanges()

    for holder, holdings in holders_with_holdings.items():
        holder_total_area = total_areas[holder]
        seeds = seed_polygons[holder]
        neighbours = self.get_neighbours(layer, seeds)
        ngh_features = neighbours.getFeatures()
        nghs_ids = [x.attribute(self.id_attribute) for x in ngh_features]
        ngh_features = neighbours.getFeatures()
        for nghfeat in ngh_features:
            ngh_holder = nghfeat.attribute(self.holder_attribute)
            ngh_feat_id = nghfeat.attribute(self.id_attribute)
            area_value = holdings_with_areas[ngh_feat_id]

            for holding in holdings:
                holding_area = holdings_with_areas[holding]
                new_total_area = holder_total_area - holding_area + area_value
                if holding in changables and ngh_feat_id in changables:
                    if holding not in nghs_ids and nghfeat.attribute(self.holder_attribute) != holder:
                        if new_total_area > holder_total_area - (holder_total_area * (self.tolerance / 100)) and new_total_area < holder_total_area + (
                                holder_total_area * (self.tolerance / 100)):
                            self.set_new_attribute(layer, ngh_feat_id, holding, new_id)
                            self.set_new_attribute(layer, holding, ngh_feat_id, new_id)
                            self.set_new_attribute(layer, ngh_feat_id, holder, new_holder)
                            self.set_new_attribute(layer, holding, ngh_holder, new_holder)
                            changables.pop(changables.index(holding))
                            changables.pop(changables.index(ngh_feat_id))
                            total_areas[holder] = new_total_area
                            total_areas[ngh_holder] = total_areas[ngh_holder]-area_value+holding_area
                            counter += 1
                            logging.debug(f'Change {str(counter)}')
                            logging.debug(f'Old holder: {ngh_holder}, old holding id: {ngh_feat_id}')
                            logging.debug(f'New holder: {holder}, new holding id: {holding}')
                            break
    return layer, new_holder, new_id, changables, total_areas

def one_to_many_swap(self, layer, holders_with_holdings, holdings_with_areas, seed_polygons, total_areas, changables, new_holder, new_id):
    counter = 0
    for holder, holdings in holders_with_holdings.items():
        holder_total_area = total_areas[holder]
        seeds = seed_polygons[holder]
        holdings_areas = [holdings_with_areas[key] for key in list(holdings_with_areas.keys()) if key in holdings and key in changables]
        neighbours = self.get_neighbours(layer, seeds)
        ngh_features = neighbours.getFeatures()
        nghs_ids = [x.attribute(self.id_attribute) for x in ngh_features]
        ngh_features = neighbours.getFeatures()
        for nghfeat in ngh_features:
            ngh_holder = nghfeat.attribute(self.holder_attribute)
            ngh_feat_id = nghfeat.attribute(self.id_attribute)
            area_value = holdings_with_areas[ngh_feat_id]

            combinations = []
            for L in range(len(holdings_areas) + 1):
                for subset in itertools.combinations(holdings_areas, L):
                    combinations.append(subset)
            for comb in combinations:
                list_combo = list(comb)
                holding_area = sum(list_combo)
                new_total_area = holder_total_area - holding_area + area_value
                if new_total_area > holder_total_area - (holder_total_area * (self.tolerance / 100)) and new_total_area < holder_total_area + (
                        holder_total_area * (self.tolerance / 100)):
                            if ngh_feat_id in changables:
                                holding = []
                                for key, value in holdings_with_areas.items():
                                    if value in list_combo and key not in nghs_ids and key in changables:
                                        holding.append(key)
                                if len(holding) == len(list_combo) and nghfeat.attribute(self.holder_attribute) != holder:
                                    self.set_new_attribute(layer, ngh_feat_id, ','.join(holding), new_id)
                                    self.set_new_attribute(layer, ngh_feat_id, holder, new_holder)
                                    for hold in holding:
                                        self.set_new_attribute(layer, hold, ngh_feat_id, new_id)
                                        self.set_new_attribute(layer, hold, ngh_holder, new_holder)
                                        changables.pop(changables.index(hold))
                                    counter += 1
                                    logging.debug(f'Change {str(counter)}')
                                    logging.debug(f'Change {comb}')
                                    logging.debug(f'Old holder: {ngh_holder}, old holding id: {ngh_feat_id}')
                                    logging.debug(f'New holder: {holder}, new holding id: {holding}')
                                    changables.pop(changables.index(ngh_feat_id))
                                    break
    return layer
"""