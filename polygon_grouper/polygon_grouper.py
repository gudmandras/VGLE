# -*- coding: utf-8 -*-
"""
/***************************************************************************
 vgle
                                 A QGIS plugin
 This plugin groups framgented poylgons together.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-07-01
        git sha              : $Format:%H$
        copyright            : (C) 2024 by GOPA
        email                : gudmandras@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,  QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, Qgis, QgsLayerTree, QgsLayerTreeLayer, QgsField, QgsVectorFileWriter, QgsVectorLayer, QgsExpression, QgsProcessingFeedback
from qgis.utils import iface
from qgis.core import QgsFieldProxyModel
from PyQt5.QtCore import Qt
import qgis.core

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .polygon_grouper_dialog import vgleDialog
import os.path
import processing
import itertools
import logging
from datetime import datetime
import time, copy, uuid



class vgle:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'vgle_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&VGLE')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.dlg = vgleDialog()
        self.dlg.button_box.accepted.disconnect()
        self.dlg.button_box.accepted.connect(self.run)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('vgle', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/polygon_grouper/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Polygon grouper'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&VGLE'),
                action)
            self.iface.removeToolBarIcon(action)

    def fill_attributes(self, layer):
        self.dlg.mComboBox_2.clear()
        attributes = layer.fields()
        for attr in attributes:
            self.dlg.mComboBox_2.addItemWithCheckState(str(attr.name()), 0)
        self.dlg.mComboBox_2.view().setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)

    def set_progress_bar(self, value):
        self.dlg.progressBar.setValue(value)

    def start_logging(self, layer, directory):
        path = os.path.join(directory, f"{str(layer.name())}_log.txt")
        formatter = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        logging.basicConfig(filename=path, level=logging.DEBUG, format=formatter, filemode='w')

    def end_logging(self): 
        logging.shutdown()

    def fill_algorithms(self):
        self.algorithms = ['Neighbours', 'Closer', "Neighbours, then closer", "Closer, then neighbours"]
        for alg in self.algorithms:
            self.dlg.comboBox.addItem(alg)

    def close1(self):
        raise RuntimeError

    def close2(self):
        self.dlg.close()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg.mFieldComboBox_2.setFilters(QgsFieldProxyModel.Numeric)
            self.fill_algorithms()
            try:
                self.dlg.mMapLayerComboBox.setLayer(list(QgsProject.instance().mapLayers().values())[0])
                if self.dlg.mMapLayerComboBox.currentLayer():
                    self.fill_attributes(self.dlg.mMapLayerComboBox.currentLayer())
                    self.dlg.mFieldComboBox_2.setLayer(self.dlg.mMapLayerComboBox.currentLayer())
            except IndexError:
                pass
        else:
            self.dlg.activateWindow()

        self.dlg.mMapLayerComboBox.layerChanged.connect(self.dlg.mFieldComboBox_2.setLayer)
        self.dlg.mMapLayerComboBox.layerChanged.connect(lambda:
        self.fill_attributes(self.dlg.mMapLayerComboBox.currentLayer()))
        
        # show the dialog
        self.dlg.show()

        # Set progress bar
        self.dlg.progressBar.setRange(0, 100)
        #f = QgsProcessingFeedback()
        #f.progressChanged.connect(self.set_progress_bar)

        self.dlg.pushButton.clicked.connect(self.close1)
        self.dlg.button_box.rejected.connect(self.close2)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed

        if result:
            #Get inputs
            field0 = self.dlg.mMapLayerComboBox.currentText()
            field1 = self.dlg.checkBox.checkState()
            field2 = self.dlg.mComboBox_2.checkedItems()
            field3 = self.dlg.mFieldComboBox_2.currentField()
            self.weight = field3
            field4 = self.dlg.mQgsSpinBox.value()
            self.tolerance = field4
            field5 = self.dlg.mQgsFileWidget.filePath()
            field6 = self.dlg.mQgsSpinBox_2.value()
            self.distance = field6
            field7 = self.dlg.checkBox_2.checkState()
            if field7 == 2:
                self.use_single = True
            else:
                self.use_single = False
            field8 = self.algorithms.index(self.dlg.comboBox.currentText())

            input_layer = QgsProject().instance().mapLayersByName(field0)[0]
            if field1 == 2:
                self.get_selected_features(input_layer)
            self.start_logging(input_layer, field5)

            main_start_time = time.time()
            logging.debug(f'Start time: {datetime.now().strftime("%Y_%m_%d_%H_%M")}')
            logging.debug(f'Input layer: {field0}')
            if field1 == 2:
                logging.debug(f'Preference to selected items: True')
            logging.debug(f'Holder atrribute(s): {field2}')
            logging.debug(f'Weight attribute: {field3}')
            logging.debug(f'Tolerance: {str(field4)}')
            logging.debug(f'Output dir: {str(field5)}')

            temp_layer = self.create_temp_layer(input_layer, field5, self.algorithms[field8].lower())
            swaped_layer = None
            merged_layer = None
            try:
                layer, self.holder_attribute = self.set_holder_field(temp_layer, field2)
                holders_with_holdings = self.get_holders_holdings(layer)
                layer, self.id_attribute, holders_with_holdings = self.create_id_field(layer, holders_with_holdings)
                holdings_with_area = self.get_holdings_areas(layer, field3)
                self.hol_w_hol = holders_with_holdings
                self.hol_w_aea = holdings_with_area
                self.holder_total_area = self.calculate_total_area()
                self.determine_seed_polygons(field1, layer)
                logging.info(type(self).__name__)
                if field8 < 2:
                    self.set_progress_bar(20)
                    if field8 == 0:
                        swaped_layer = self.swap_iteration(layer)
                    elif field8 == 1:
                        self.check_seed_number()
                        swaped_layer = self.closer(layer)
                else:
                    self.set_progress_bar(10)
                    if field8 == 2:
                        self.check_seed_number()
                        original_seeds = copy.deepcopy(self.seeds)
                        swaped_layer = self.swap_iteration(layer)
                        self.set_progress_bar(50)
                        swaped_layer = self.closer(swaped_layer, original_seeds)
                    elif field8 == 3:
                        self.check_seed_number()
                        swaped_layer = self.closer(layer)
                        self.set_progress_bar(50)
                        swaped_layer = self.swap_iteration(swaped_layer)
                if field8 < 2:
                    self.set_progress_bar(80)
                else:
                    self.set_progress_bar(90)

                QgsProject.instance().addMapLayer(swaped_layer, False)
                root = QgsProject().instance().layerTreeRoot()
                root.insertLayer(0, swaped_layer)
                swaped_layer.commitChanges()
                #iface.vectorLayerTools().stopEditing(swaped_layer)

                if field8 == 0 or field8 == 2 or field8 == 3:
                    merged_layer = self.create_merged_file(swaped_layer, field5)
                    self.set_progress_bar(100)

                    QgsProject.instance().addMapLayer(merged_layer, False)
                    root = QgsProject().instance().layerTreeRoot()
                    root.insertLayer(0, merged_layer)

                main_end_time = time.time()
                logging.debug(f'Script time:{main_end_time-main_start_time}')
                self.end_logging()
                self.set_progress_bar(0)
            except:
                QgsProject.instance().removeMapLayer(temp_layer)
                root = QgsProject().instance().layerTreeRoot()
                root.removeLayer(temp_layer)
                if swaped_layer:
                    QgsProject.instance().removeMapLayer(swaped_layer)
                    root = QgsProject().instance().layerTreeRoot()
                    root.removeLayer(swaped_layer)
                if merged_layer:
                    QgsProject.instance().removeMapLayer(merged_layer)
                    root = QgsProject().instance().layerTreeRoot()
                    root.removeLayer(merged_layer)
                self.set_progress_bar(0)

    def check_seed_number(self):
        for seed in self.seeds.values():
            if len(seed) > 1:
                qgis.utils.iface.messageBar().pushMessage("More than one feature preference for one holder at closer function - algorithm stop", level=Qgis.Critical, duration=30)
                self.close1()

    def get_selected_features(self, input_layer):
        alg_params = {
            'INPUT': input_layer,
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
        self.selected_features = processing.run("native:saveselectedfeatures",alg_params)["OUTPUT"]

    def create_temp_layer(self, layer, directory, postfix):
        if directory:
            path = os.path.join(directory, f"{str(layer.name())}_{postfix}.shp")
            while os.path.isfile(path):
                timestamp = datetime.fromtimestamp(time.time()).strftime("%d_%m_%Y_%H_%M_%S")
                path = os.path.join(directory, f"{str(layer.name())}_{postfix}_{timestamp}.shp")
            options = QgsVectorFileWriter.SaveVectorOptions()
            options.driverName = "ESRI Shapefile"
            options.fileEncoding = "UTF-8"
            context = QgsProject.instance().transformContext()
            QgsVectorFileWriter.writeAsVectorFormatV2(layer, path, context, options)
            temp_layer = QgsVectorLayer(path, f"{postfix} layer", "ogr")
            return temp_layer
        else:
            epsg = layer.crs().geographicCrsAuthId()[-4:]
            feats = [feature for feature in layer.getFeatures()]
            mem_layer = QgsVectorLayer(f"Polygon?crs=epsg:{epsg}", f"{postfix} layer", "memory")
            mem_layer_data = mem_layer.dataProvider()
            attr = layer.dataProvider().fields().toList()
            mem_layer_data.addAttributes(attr)
            mem_layer.updateFields()
            mem_layer_data.addFeatures(feats)
            mem_layer.commitChanges()
            return mem_layer

    def set_holder_field(self, layer, field1):
        if len(field1) == 1:
            return layer, field1[0]
        else:
            layer, field_name = self.set_temp_holder_field(layer)
            layer = self.set_temp_holder_value(layer, field_name, field1)
            return layer, field_name

    def set_temp_holder_field(self, layer):
        field_name = 'holder_id'
        layer_attributes = self.get_attributes_names(layer)
        if field_name in layer_attributes:
            counter = 0
            while field_name in layer_attributes:
                field_name = f"{field_name}{counter}"
                counter += 1
        layer.startEditing()
        data_provider = layer.dataProvider()
        data_provider.addAttributes([QgsField(field_name, QVariant.Int)])
        layer.updateFields()
        return layer, field_name

    def get_attributes_names(self, layer):
        attributes = [field.name() for field in layer.fields()]
        return attributes

    def set_temp_holder_value(self, layer, field_name, attributes):
        field_name_id = [turn for turn, field in enumerate(layer.fields()) if field.name() == field_name][0]
        big_list = []
        features = layer.getFeatures()
        for turn, feature in enumerate(features):
            tempList = []
            for attr in attributes:
                value = feature.attribute(attr)
                logging.debug(value)
                if value != qgis.core.NULL:
                    logging.debug(value)
                    tempList.append(value)
            temp_string = ''
            for turn, tmp in enumerate(tempList):
                if len(tempList) > 1:
                    if tmp != '' and tmp  != qgis.core.NULL:
                        if tmp != tempList[-1]:
                            temp_string += f'{tmp},'
                        else:
                            temp_string += f'{tmp}'
                        if len(temp_string) > 0:
                            if temp_string not in big_list:
                                big_list.append(temp_string)
                else:
                    if tmp and tmp != '' and tmp  != qgis.core.NULL:
                        if temp_string not in big_list:
                            temp_string += f'{tmp}'
        logging.debug(big_list)
        counter = 1
        for lista in big_list:
            expression = ''
            list_unique = lista.split(',')
            logging.debug(list_unique)
            for turn, unique in enumerate(list_unique):
                if unique != qgis.core.NULL:
                    if type(unique) == str:
                        if turn+1 != len(list_unique):
                            expression += '"{field}"=\'{value}\' AND '.format(field=attributes[turn],value=str(unique))
                        else:
                            expression += '"{field}"=\'{value}\''.format(field=attributes[turn],value=str(unique))
                    else:
                        if turn+1 != len(list_unique):
                            expression += '"{field}"={value} AND '.format(field=attributes[turn],value=str(unique))
                        else:
                            expression += '"{field}"={value}'.format(field=attributes[turn],value=str(unique))
            logging.debug(expression)
            layer.selectByExpression(expression)
            selected_features = layer.selectedFeatures()
            if layer.selectedFeatureCount() > 0:
                counter += 1
                if (layer.isEditable() == False):
                    layer.startEditing()
                for feature in selected_features:
                    layer.changeAttributeValue(feature.id(),field_name_id,counter)
                layer.commitChanges()
                layer.removeSelection()

        return layer

    def create_id_field(self, layer, holders):
        field_name = 'temp_id'
        layer_attributes = self.get_attributes_names(layer)
        if field_name in layer_attributes:
            counter = 0
            while field_name in layer_attributes:
                field_name = f"{field_name}{counter}"
                counter += 1
        layer.startEditing()
        data_provider = layer.dataProvider()
        data_provider.addAttributes([QgsField(field_name, QVariant.String, len=50)])
        layer.updateFields()
        layer, holders_with_holding_id = self.set_id_field(layer, field_name, holders)
        return layer, field_name, holders_with_holding_id

    def set_id_field(self, layer, attribute, holders):
        attribute_id = self.get_attributes_names(layer).index(attribute)
        holders_with_holding_id = {}
        if (layer.isEditable() == False):
            layer.startEditing()
        for holder, holdings in holders.items():
            counter = 0
            for feature_id in holdings:
                new_id = str(uuid.uuid4())
                layer.changeAttributeValue(feature_id,attribute_id,new_id)
                counter += 1
                if holder in list(holders_with_holding_id.keys()):
                    holders_with_holding_id[holder].append(new_id)
                else:
                    holders_with_holding_id[holder] = list()
                    holders_with_holding_id[holder].append(new_id)
        layer.commitChanges()
        return layer, holders_with_holding_id

    def get_holders_holdings(self, layer):
        holders_with_holdings = {}
        features = layer.getFeatures()
        for feature in features:
            feature_id = feature.id()
            holder = feature.attribute(self.holder_attribute)
            if holder != qgis.core.NULL:
                if holder in list(holders_with_holdings.keys()):
                    holders_with_holdings[holder].append(feature_id)
                else:
                    holders_with_holdings[holder] = [feature_id]
        return holders_with_holdings

    def calculate_total_area(self):
        holder_total_area = {}
        for holder, holdings in self.hol_w_hol.items():
            total_area = 0
            for holding in holdings:
                total_area += self.hol_w_aea[holding]
            holder_total_area[holder] = total_area
        return holder_total_area

    def get_holdings_areas(self, layer,  area_id):
        holdings_with_areas = {}
        features = layer.getFeatures()
        for feature in features:
            area = feature.attribute(area_id)
            holding_id = feature.attribute(self.id_attribute)
            holdings_with_areas[holding_id] = area
        return holdings_with_areas

    def determine_seed_polygons(self, check, layer):
        holders_with_seeds = {}
        if check == 2:
            alg_params = {
                'INPUT': layer,
                'PREDICATE':[3],
                'INTERSECT':self.selected_features,
                'OUTPUT': 'TEMPORARY_OUTPUT'
            }
            processing.run("native:selectbylocation", alg_params)['OUTPUT']
            selfeatures = layer.selectedFeatures()
            for feature in selfeatures:
                holder_value = feature.attribute(self.holder_attribute)
                id_value = feature.attribute(self.id_attribute)
                if holder_value not in list(holders_with_seeds.keys()):
                    holders_with_seeds[holder_value] = [id_value]
                else:
                    holders_with_seeds[holder_value].append(id_value)
        for holder, holdings in self.hol_w_hol.items():
            if holder not in list(holders_with_seeds.keys()):
                if self.use_single:
                    if len(holdings) > 1:
                        largest_area = 0
                        largest_feature_id = ''
                        for holding in holdings:
                            area_value = self.hol_w_aea[holding]
                            if largest_area < area_value:
                                largest_area = area_value
                                largest_feature_id = holding
                        holders_with_seeds[holder] = [largest_feature_id]
                    else:
                        holders_with_seeds[holder] = []
                else: 
                    largest_area = 0
                    largest_feature_id = ''
                    for holding in holdings:
                        area_value = self.hol_w_aea[holding]
                        if largest_area < area_value:
                            largest_area = area_value
                            largest_feature_id = holding
                    holders_with_seeds[holder] = [largest_feature_id]
        self.seeds = holders_with_seeds

    def swap_iteration(self, layer):
        self.counter = 0
        changes = 1
        changer = True
        try:
            turn = int(self.nholder_attribute.split('_')[0])
            self.nholder_attribute = str(int(self.nholder_attribute.split('_')[0])) + self.nholder_attribute[1:]
            self.nid_attribute = str(int(self.nid_attribute.split('_')[0])) + self.nid_attribute[1:]
        except AttributeError:
            turn = 0
        self.global_changables = self.get_changable_holdings()
        local_total_areas = copy.deepcopy(self.holder_total_area)
        while changer:
            turn += 1
            logging.debug(
                f"Turn {turn - 1}'s fraction number: {len(list(self.seeds.values())) / len(list(self.hol_w_hol.values()))}")
            layer, local_total_areas, local_changables = self.swap(layer, local_total_areas, turn)
            if turn == 1:
                changes = copy.deepcopy(self.counter)
                logging.debug(f'Changes in turn {turn}: {self.counter}')
            else:
                logging.debug(f'Changes in turn {turn}: {self.counter-changes}')
                if changes == self.counter:
                    changer = False
                    layer.startEditing()
                    indexes = []
                    indexes.append(layer.fields().indexFromName(self.nid_attribute))
                    indexes.append(layer.fields().indexFromName(self.nholder_attribute))
                    layer.deleteAttributes(indexes)
                    layer.updateFields()
                    layer.commitChanges(False)
                else:
                    changes = copy.deepcopy(self.counter)
        return layer

    def get_changable_holdings(self, in_distance=None):
        changable_holdings = []
        for holder, holdings in self.hol_w_hol.items():
            for holding in holdings:
                if holding not in self.seeds[holder]:
                    if in_distance:
                        if holding in in_distance:
                            changable_holdings.append(holding)
                    else:
                        changable_holdings.append(holding)
        return changable_holdings

    def swap(self, layer, total_areas, turn=1):
        layer = self.set_turn_attributes(layer, turn)
        changables = None
        for holder, holdings in self.hol_w_hol.items():
            seeds = self.seeds[holder]
            if len(seeds) == 1:
                ngh_ids, neighbours = self.get_neighbours(layer, seeds[0])
                in_distance = self.distance_search(layer, seeds[0])
                distance_changes = self.get_changable_holdings(in_distance)
                if changables:
                    local_changables = [dist for dist in distance_changes if dist in self.global_changables and dist in changables]
                else:
                    local_changables = [dist for dist in distance_changes if dist in self.global_changables]
                layer, changables, total_areas = self.search_for_changes(layer, seeds[0], local_changables, ngh_ids, neighbours, total_areas, holder, holdings)
            else:
                for seed in seeds:
                    ngh_ids, neighbours = self.get_neighbours(layer, seed)
                    in_distance = self.distance_search(layer, seed)
                    distance_changes = self.get_changable_holdings(in_distance)
                    if changables:
                        local_changables = [dist for dist in distance_changes if dist in self.global_changables and dist in changables]
                    else:
                        local_changables = [dist for dist in distance_changes if dist in self.global_changables]
                    layer, changables, total_areas = self.search_for_changes(layer, seed, local_changables, ngh_ids, neighbours, total_areas, holder, holdings)
        return layer, total_areas, changables

    def get_neighbours(self, layer, seed):
        expression = f'"{self.id_attribute}" = \'{seed}\''
        layer.selectByExpression(expression)
        alg_params = {
            'INPUT': layer,
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
        seed_features = processing.run('native:saveselectedfeatures', alg_params)["OUTPUT"]
        alg_params = {
            'INPUT': layer,
            'INTERSECT': seed_features,
            'PREDICATE': 4,
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
        neighbours = processing.run('native:extractbylocation', alg_params)["OUTPUT"]
        layer.removeSelection()

        ngh_features = neighbours.getFeatures()
        nghs_ids = [x.attribute(self.id_attribute) for x in ngh_features]

        return nghs_ids, neighbours

    def distance_search(self, layer, seed=None):
        if seed:
            search_items = []
            feats = [feat for feat in layer.getFeatures()]
            expression = f'"{self.id_attribute}" = \'{seed}\''
            layer.selectByExpression(expression)
            sel_feat = layer.selectedFeatures()[0]
            geom_buffer = sel_feat.geometry().buffer(self.distance, -1)
            for feat in feats:
                if feat.geometry().intersects(geom_buffer):
                    search_items.append(feat.attribute(self.id_attribute))
            layer.removeSelection()
        else:
            search_items = []
            feats = [feat for feat in layer.getFeatures()]
            geom_buffer = next(layer.getFeatures()).geometry().buffer(self.distance, -1)
            for feat in feats:
                if feat.geometry().intersects(geom_buffer):
                    search_items.append(feat.attribute(self.id_attribute))
            layer.removeSelection()
        return search_items

    def ids_for_change(self, holding_list, changables):
        try:
            ids = []
            for h_id in holding_list:
                if h_id in changables:
                    ids.append(h_id)
            return ids
        except ValueError:
            return None

    def search_for_changes(self, layer, seed, changables, ngh_ids, neighbours, total_areas, holder, holdings):
        #Filter out nghs
        holdings_ids = []
        for h_id in holdings:
            if h_id in ngh_ids:
                if h_id not in self.seeds[holder]:
                    self.seeds[holder].append(h_id)
            else:
                holdings_ids.append(h_id)

        ngh_features = neighbours.getFeatures()
        for nghfeat in ngh_features:
            # Get holder total area
            holder_total_area = total_areas[holder]
            #Filter holdings
            filtered_holdings_ids = self.ids_for_change(holdings_ids, changables)
            if filtered_holdings_ids:
                # Get ngh holder name
                ngh_holder = int(nghfeat.attribute(self.nholder_attribute))
                # Get holder total area
                ngh_holder_total_area = total_areas[ngh_holder]
                # Get holders holdings
                ngh_holdings = self.hol_w_hol[ngh_holder]
                # Filter holdings
                ngh_holdings_ids = self.ids_for_change(ngh_holdings, changables)
                # Filter out nghs
                filtered_ngh_holdings_ids = []
                for h_id in ngh_holdings_ids:
                    if h_id not in ngh_ids:
                        filtered_ngh_holdings_ids.append(h_id)

                if filtered_ngh_holdings_ids:
                    ngh_feat_id = nghfeat.attribute(self.id_attribute)
                    if ngh_feat_id in changables:
                        filtered_ngh_holdings_ids.append(ngh_feat_id)

                        holder_combinations = []
                        for L in range(len(filtered_holdings_ids) + 1):
                            for subset in itertools.combinations(filtered_holdings_ids, L):
                                if len(subset) >= 1 and subset not in holder_combinations:
                                    holder_combinations.append(subset)

                        ngh_combinations = []
                        for L in range(len(filtered_ngh_holdings_ids) + 1):
                            for subset in itertools.combinations(filtered_ngh_holdings_ids, L):
                                if ngh_feat_id in subset and subset not in ngh_combinations:
                                    ngh_combinations.append(subset)

                        holder_comb_totals = []
                        for comb in holder_combinations:
                            temp_area = self.calculate_combo_area(comb)
                            holder_comb_totals.append(temp_area)

                        ngh_holder_comb_totals = []
                        for comb in ngh_combinations:
                            temp_area = self.calculate_combo_area(comb)
                            ngh_holder_comb_totals.append(temp_area)

                        total_areas_difference = []
                        holder_new_total_areas = []
                        ngh_new_total_areas = []
                        possible_holder_changes = []
                        possible_ngh_changes = []
                        for holder_comb in holder_comb_totals:
                            for ngh_comb in ngh_holder_comb_totals:
                                new_holder_total_area = holder_total_area - holder_comb + ngh_comb
                                if self.check_total_area_threshold(new_holder_total_area, holder):
                                    new_ngh_total_area = ngh_holder_total_area - ngh_comb + holder_comb
                                    if self.check_total_area_threshold(new_ngh_total_area, ngh_holder):
                                        total_areas_difference.append(new_holder_total_area-holder_total_area)
                                        holder_new_total_areas.append(new_holder_total_area)
                                        ngh_new_total_areas.append(new_ngh_total_area)
                                        possible_holder_changes.append(holder_combinations[holder_comb_totals.index(holder_comb)])
                                        possible_ngh_changes.append(ngh_combinations[ngh_holder_comb_totals.index(ngh_comb)])
                        if possible_holder_changes:
                            logging.debug(
                                f'Possible change(s) for {ngh_feat_id} as neighbour of {seed}: {possible_holder_changes}')
                            indexer = total_areas_difference.index(min(total_areas_difference))
                            smallest = possible_holder_changes[indexer]
                            ngh_cmbs = possible_ngh_changes[indexer]
                            if len(smallest) > 1 and len(ngh_cmbs) > 1:
                                #many to many change
                                for hold in smallest:
                                    self.set_new_attribute(layer, hold, ','.join(ngh_cmbs), self.nid_attribute)
                                    self.set_new_attribute(layer, hold, ngh_holder, self.nholder_attribute)
                                    changables.pop(changables.index(hold))
                                    self.hol_w_hol[holder].pop(self.hol_w_hol[holder].index(hold))
                                    self.hol_w_hol[ngh_holder].append(hold)
                                for ngh in ngh_cmbs:
                                    self.set_new_attribute(layer, ngh, ','.join(smallest), self.nid_attribute)
                                    self.set_new_attribute(layer, ngh, holder, self.nholder_attribute)
                                    changables.pop(changables.index(ngh))
                                    self.hol_w_hol[ngh_holder].pop(self.hol_w_hol[ngh_holder].index(ngh))
                                    self.hol_w_hol[holder].append(ngh)
                                self.global_changables.pop(self.global_changables.index(ngh_feat_id))
                                self.seeds[holder].append(ngh_feat_id)
                                total_areas[holder] = holder_new_total_areas[total_areas_difference.index(min(total_areas_difference))]
                                total_areas[ngh_holder] = ngh_new_total_areas[total_areas_difference.index(min(total_areas_difference))]
                                self.counter += 1
                                logging.debug(
                                    f'Change {str(self.counter)} for {ngh_feat_id} (holder:{ngh_holder}) as neighbour of {seed} (holder:{holder}): {smallest} for {ngh_cmbs}')
                            elif len(smallest) > 1 and len(ngh_cmbs) == 1 or len(smallest) == 1 and len(ngh_cmbs) > 1:
                                #many to one change
                                if len(smallest) > 1:
                                    for hold in smallest:
                                        self.set_new_attribute(layer, hold, ngh_cmbs[0], self.nid_attribute)
                                        self.set_new_attribute(layer, hold, ngh_holder, self.nholder_attribute)
                                        changables.pop(changables.index(hold))
                                        self.hol_w_hol[holder].pop(self.hol_w_hol[holder].index(hold))
                                        self.hol_w_hol[ngh_holder].append(hold)
                                    self.set_new_attribute(layer, ngh_feat_id, ','.join(smallest), self.nid_attribute)
                                    self.set_new_attribute(layer, ngh_feat_id, holder, self.nholder_attribute)
                                    changables.pop(changables.index(ngh_feat_id))
                                    self.hol_w_hol[ngh_holder].pop(self.hol_w_hol[ngh_holder].index(ngh_feat_id))
                                    self.hol_w_hol[holder].append(ngh_feat_id)
                                else:
                                    for ngh in ngh_cmbs:
                                        self.set_new_attribute(layer, ngh, smallest[0], self.nid_attribute)
                                        self.set_new_attribute(layer, ngh, holder, self.nholder_attribute)
                                        changables.pop(changables.index(ngh))
                                        self.hol_w_hol[ngh_holder].pop(self.hol_w_hol[ngh_holder].index(ngh))
                                        self.hol_w_hol[holder].append(ngh)
                                    self.set_new_attribute(layer, smallest[0], ','.join(ngh_cmbs), self.nid_attribute)
                                    self.set_new_attribute(layer, smallest[0], ngh_holder, self.nholder_attribute)
                                    changables.pop(changables.index(smallest[0]))
                                    self.hol_w_hol[holder].pop(self.hol_w_hol[holder].index(smallest[0]))
                                    self.hol_w_hol[ngh_holder].append(smallest[0])
                                self.global_changables.pop(self.global_changables.index(ngh_feat_id))
                                self.seeds[holder].append(ngh_feat_id)
                                total_areas[holder] = holder_new_total_areas[total_areas_difference.index(min(total_areas_difference))]
                                total_areas[ngh_holder] = ngh_new_total_areas[total_areas_difference.index(min(total_areas_difference))]
                                self.counter += 1
                                logging.debug(
                                    f'Change {str(self.counter)} for {ngh_feat_id} (holder:{ngh_holder}) as neighbour of {seed} (holder:{holder}): {smallest} for {ngh_cmbs}')
                            else:
                                #one to one change
                                self.set_new_attribute(layer, smallest[0], ngh_feat_id, self.nid_attribute)
                                self.set_new_attribute(layer, smallest[0], ngh_holder, self.nholder_attribute)
                                self.set_new_attribute(layer, ngh_feat_id, smallest[0], self.nid_attribute)
                                self.set_new_attribute(layer, ngh_feat_id, holder, self.nholder_attribute)
                                changables.pop(changables.index(ngh_feat_id))
                                changables.pop(changables.index(smallest[0]))
                                self.hol_w_hol[ngh_holder].pop(self.hol_w_hol[ngh_holder].index(ngh_feat_id))
                                self.hol_w_hol[holder].append(ngh_feat_id)
                                self.hol_w_hol[holder].pop(self.hol_w_hol[holder].index(smallest[0]))
                                self.hol_w_hol[ngh_holder].append(smallest[0])
                                self.global_changables.pop(self.global_changables.index(ngh_feat_id))
                                self.seeds[holder].append(ngh_feat_id)
                                total_areas[holder] = holder_new_total_areas[total_areas_difference.index(min(total_areas_difference))]
                                total_areas[ngh_holder] = ngh_new_total_areas[total_areas_difference.index(min(total_areas_difference))]
                                self.counter += 1
                                logging.debug(
                                    f'Change {str(self.counter)} for {ngh_feat_id} (holder:{ngh_holder}) as neighbour of {seed} (holder:{holder}): {smallest} for {ngh_cmbs}')

        return layer, changables, total_areas

    def closer(self, layer, seeds=None):
        self.distance_matrix, attr_names = self.create_distance_matrix(layer)
        self.counter = 0
        changes = 1
        changer = True
        self.global_changables = self.get_changable_holdings()

        if seeds:
            self.seeds = seeds
            turner = int(self.nholder_attribute.split('_')[0])
            self.nholder_attribute = str(int(self.nholder_attribute.split('_')[0])-1) + self.nholder_attribute[1:]
            self.nid_attribute = str(int(self.nid_attribute.split('_')[0])-1) + self.nid_attribute[1:]
        else:
            turner = 0

        local_total_areas = copy.deepcopy(self.holder_total_area)
        while changer:
            turner += 1
            layer = self.set_turn_attributes(layer, turner)
            hol_w_hol = copy.deepcopy(self.hol_w_hol)
            changables = copy.deepcopy(self.global_changables)

            for holder, holdings in hol_w_hol.items():
                holder_total_area = local_total_areas[holder]
                seed = self.seeds[holder][0]
                in_distance = self.distance_search(layer, seed)
                distance_changes = self.get_changable_holdings(in_distance)
                filtered_holdings_ids = self.ids_for_change(holdings, distance_changes)
                filtered_holdings_ids = self.ids_for_change(filtered_holdings_ids, changables)
                for holding in holdings:
                    filtered_holdings_ids = self.ids_for_change(filtered_holdings_ids, self.hol_w_hol[holder])
                    if holding != seed and holding in filtered_holdings_ids:
                        temp_holder_combo = None
                        temp_ch_combo = None
                        temp_holder_total_area = None
                        temp_ch_total_area = None
                        change_holder = None
                        measure = None

                        holder_combinations = []
                        for L in range(len(filtered_holdings_ids) + 1):
                            for subset in itertools.combinations(filtered_holdings_ids, L):
                                if len(subset) >= 1 and subset not in holder_combinations:
                                    holder_combinations.append(subset)
                        filtered_local_changables = [dist for dist in distance_changes if
                                                        dist not in filtered_holdings_ids and dist in changables]

                        ch_holders = []
                        for local_ch in filtered_local_changables:
                            one_ch_holder = [all_holder for all_holder, all_holdings in self.hol_w_hol.items() if
                                                local_ch in all_holdings and all_holder not in ch_holders]
                            if len(one_ch_holder) == 1:
                                ch_holders.append(one_ch_holder[0])

                        for ch_holder in ch_holders:
                            change_holder_seed = self.seeds[ch_holder][0]
                            filtered_local_ch_holdings = [hold for hold in self.hol_w_hol[ch_holder] if
                                                            hold in filtered_local_changables]

                            ch_combinations = []
                            for L in range(len(filtered_local_ch_holdings) + 1):
                                for subset in itertools.combinations(filtered_local_ch_holdings, L):
                                    if len(subset) >= 1 and subset not in ch_combinations:
                                        ch_combinations.append(subset)

                            for turn, holder_comb in enumerate(holder_combinations):
                                for turnn, ch_comb in enumerate(ch_combinations):
                                    holder_max_distance = self.max_distance(holder_comb, seed)
                                    ch_max_distance = self.max_distance(ch_comb, change_holder_seed)
                                    ch_closer = self.is_closer(holder_max_distance, ch_comb, seed)
                                    holder_closer = self.is_closer(ch_max_distance, holder_comb, change_holder_seed)
                                    if ch_closer and holder_closer:
                                        new_holder_total_area = holder_total_area - self.calculate_combo_area(holder_comb) + self.calculate_combo_area(ch_comb)
                                        if self.check_total_area_threshold(new_holder_total_area,holder):
                                            new_ch_total_area = local_total_areas[ch_holder] - self.calculate_combo_area(ch_comb) + self.calculate_combo_area(holder_comb)
                                            if self.check_total_area_threshold(new_ch_total_area, ch_holder):
                                                local_measure = sum([self.calculate_composite_number(seed, temp_id) for temp_id in holder_comb])
                                                if not measure:
                                                    change_holder = ch_holder
                                                    temp_holder_combo = holder_comb
                                                    temp_ch_combo = ch_comb
                                                    measure = local_measure
                                                    temp_holder_total_area = new_holder_total_area
                                                    temp_ch_total_area = new_ch_total_area
                                                else:
                                                    if measure < local_measure:
                                                        change_holder = ch_holder
                                                        temp_holder_combo = holder_comb
                                                        temp_ch_combo = ch_comb
                                                        measure = local_measure
                                                        temp_holder_total_area = new_holder_total_area
                                                        temp_ch_total_area = new_ch_total_area
                        if measure:
                            if len(temp_holder_combo) > 1 and len(temp_ch_combo) > 1:
                                #many to many change
                                for hold in temp_holder_combo:
                                    self.set_new_attribute(layer, hold, ','.join(temp_holder_combo), self.nid_attribute)
                                    self.set_new_attribute(layer, hold, change_holder, self.nholder_attribute)
                                    self.hol_w_hol[holder].pop(self.hol_w_hol[holder].index(hold))
                                    self.hol_w_hol[change_holder].append(hold)
                                    changables.pop(changables.index(hold))
                                for ch in temp_ch_combo:
                                    self.set_new_attribute(layer, ch, ','.join(temp_ch_combo), self.nid_attribute)
                                    self.set_new_attribute(layer, ch, holder, self.nholder_attribute)
                                    self.hol_w_hol[change_holder].pop(self.hol_w_hol[change_holder].index(ch))
                                    self.hol_w_hol[holder].append(ch)
                                    changables.pop(changables.index(ch))
                                local_total_areas[holder] = temp_holder_total_area
                                local_total_areas[change_holder] = temp_ch_total_area
                                self.counter += 1
                                logging.debug(
                                    f'Change {str(self.counter)} for {temp_ch_combo} (holder:{change_holder}) to get closer to {seed} (holder:{holder}): {temp_holder_combo} for {temp_ch_combo}')
                            elif len(temp_holder_combo) > 1 and len(temp_ch_combo) == 1 or len(temp_holder_combo) == 1 and len(temp_ch_combo) > 1:
                                #many to one change
                                if len(temp_holder_combo) > 1:
                                    for hold in temp_holder_combo:
                                        self.set_new_attribute(layer, hold, temp_ch_combo[0], self.nid_attribute)
                                        self.set_new_attribute(layer, hold, change_holder, self.nholder_attribute)
                                        self.hol_w_hol[holder].pop(self.hol_w_hol[holder].index(hold))
                                        self.hol_w_hol[change_holder].append(hold)
                                        changables.pop(changables.index(hold))
                                    self.set_new_attribute(layer, temp_ch_combo[0], holder, self.nholder_attribute)
                                    self.set_new_attribute(layer, temp_ch_combo[0], ','.join(temp_holder_combo), self.nid_attribute)
                                    self.hol_w_hol[change_holder].pop(self.hol_w_hol[change_holder].index(temp_ch_combo[0]))
                                    self.hol_w_hol[holder].append(temp_ch_combo[0])
                                    changables.pop(changables.index(temp_ch_combo[0]))
                                    self.counter += 1
                                    logging.debug(
                                        f'Change {str(self.counter)} for {temp_ch_combo} (holder:{change_holder}) to get closer to {seed} (holder:{holder}): {temp_holder_combo} for {temp_ch_combo[0]}')
                                else:
                                    for ch in temp_ch_combo:
                                        self.set_new_attribute(layer, ch, temp_holder_combo[0], self.nid_attribute)
                                        self.set_new_attribute(layer, ch, holder, self.nholder_attribute)
                                        self.hol_w_hol[change_holder].pop(self.hol_w_hol[change_holder].index(ch))
                                        self.hol_w_hol[holder].append(ch)
                                        changables.pop(changables.index(ch))
                                    self.set_new_attribute(layer, temp_holder_combo[0], change_holder, self.nholder_attribute)
                                    self.set_new_attribute(layer, temp_holder_combo[0], ','.join(temp_ch_combo), self.nid_attribute)
                                    self.hol_w_hol[holder].pop(self.hol_w_hol[holder].index(temp_holder_combo[0]))
                                    self.hol_w_hol[change_holder].append(temp_holder_combo[0])
                                    changables.pop(changables.index(temp_holder_combo[0]))
                                    self.counter += 1
                                    logging.debug(
                                        f'Change {str(self.counter)} for {temp_ch_combo} (holder:{change_holder}) to get closer to {seed} (holder:{holder}): {temp_holder_combo[0]} for {temp_ch_combo}')
                                local_total_areas[holder] = temp_holder_total_area
                                local_total_areas[change_holder] = temp_ch_total_area
                            else:
                                #one to one change
                                self.set_new_attribute(layer, temp_holder_combo[0], temp_ch_combo[0], self.nid_attribute)
                                self.set_new_attribute(layer, temp_holder_combo[0], change_holder, self.nholder_attribute)
                                self.set_new_attribute(layer, temp_ch_combo[0], temp_holder_combo[0], self.nid_attribute)
                                self.set_new_attribute(layer, temp_ch_combo[0], holder, self.nholder_attribute)
                                self.hol_w_hol[change_holder].pop(self.hol_w_hol[change_holder].index(temp_ch_combo[0]))
                                self.hol_w_hol[holder].append(temp_ch_combo[0])
                                self.hol_w_hol[holder].pop(self.hol_w_hol[holder].index(temp_holder_combo[0]))
                                self.hol_w_hol[change_holder].append(temp_holder_combo[0])
                                changables.pop(changables.index(temp_ch_combo[0]))
                                changables.pop(changables.index(temp_holder_combo[0]))
                                local_total_areas[holder] = temp_holder_total_area
                                local_total_areas[change_holder] = temp_ch_total_area
                                self.counter += 1
                                logging.debug(
                                    f'Change {str(self.counter)} for {temp_ch_combo[0]} (holder:{change_holder}) as neighbour of {seed} (holder:{holder}): {temp_holder_combo[0]} for {temp_ch_combo[0]}')      
            if turner == 1:
                changes = copy.deepcopy(self.counter)
                logging.debug(f'Changes in turn {turner}: {self.counter}')
            elif turner == 5:
                changer = False
                if changes == self.counter:
                    layer.startEditing()
                    indexes = []
                    indexes.append(layer.fields().indexFromName(self.nid_attribute))
                    indexes.append(layer.fields().indexFromName(self.nholder_attribute))
                    layer.deleteAttributes(indexes)
                    layer.updateFields()
            else:
                logging.debug(f'Changes in turn {turner}: {self.counter - changes}')
                if changes == self.counter:
                    changer = False
                    layer.startEditing()
                    indexes = []
                    indexes.append(layer.fields().indexFromName(self.nid_attribute))
                    indexes.append(layer.fields().indexFromName(self.nholder_attribute))
                    layer.deleteAttributes(indexes)
                    layer.updateFields()
                else:
                    changes = copy.deepcopy(self.counter)

        return layer

    def create_new_attribute(self, layer, turn, adj):
        field_name = f'{turn}_{adj}'
        layer_attributes = self.get_attributes_names(layer)
        if field_name in layer_attributes:
            counter = 0
            while field_name in layer_attributes:
                field_name = f"{field_name}{counter}"
                counter += 1
        layer.startEditing()
        data_provider = layer.dataProvider()
        data_provider.addAttributes([QgsField(field_name, QVariant.String,len=50)])
        layer.updateFields()
        return layer, field_name

    def set_new_attribute(self, layer, feature_id, new_value, field):
        expression = ''
        expression += f'"{self.id_attribute}" = \'{feature_id}\''
        layer.selectByExpression(expression)
        index = self.get_attributes_names(layer).index(field)
        layer.startEditing()
        for feature in layer.selectedFeatures():
            layer.changeAttributeValue(feature.id(), index, new_value)
        layer.commitChanges()

    def set_turn_attributes(self, layer, turn):
        layer, new_id = self.create_new_attribute(layer, turn, 'id')
        layer, new_holder = self.create_new_attribute(layer, turn, 'holder')
        if turn == 1:
            layer.startEditing()
            for feature in layer.getFeatures():
                layer.changeAttributeValue(feature.id(), self.get_attributes_names(layer).index(new_holder),
                                           str(feature.attribute(self.holder_attribute)))
            layer.commitChanges()
        else:
            layer.startEditing()
            for feature in layer.getFeatures():
                layer.changeAttributeValue(feature.id(), self.get_attributes_names(layer).index(new_holder),
                                           str(feature.attribute(self.nholder_attribute)))
            layer.commitChanges()
        self.nid_attribute = new_id
        self.nholder_attribute = new_holder
        return layer

    def create_distance_matrix(self, layer):
        alg_params = {
        'INPUT':layer,
        'ALL_PARTS': False,
        'OUTPUT':'TEMPORARY_OUTPUT'
        }
        centroids = processing.run("native:centroids", alg_params)['OUTPUT']
        alg_params = {
        'INPUT':centroids,
        'INPUT_FIELD': self.id_attribute,
        'TARGET': centroids,
        'TARGET_FIELD': self.id_attribute,
        'MATRIX_TYPE': 1,
        'NEAREST_POINTS': 0,
        'OUTPUT':'TEMPORARY_OUTPUT'
        }
        matrix = processing.run("qgis:distancematrix", alg_params)['OUTPUT']
        distance_matrix = {}
        names = self.get_attributes_names(matrix)
        for feature in matrix.getFeatures():
            temp_list = {}
            for field in names:
                value = feature.attribute(field)
                temp_list[field] = value
            distance_matrix[feature.attribute('ID')] = temp_list

        return distance_matrix, names

    def create_merge_feature(self, layer, features_id):
        feats = [feat for feat in layer.getFeatures()]
        for turn, feat in enumerate(features_id):
            if turn == 0:
                expression = f'"{self.id_attribute}" = \'{feat}\''
            else:
                expression += f'AND "{self.id_attribute}" = \'{feat}\''
        layer.selectByExpression(expression)
        sel_feat = layer.selectedFeatures()
        geom = None
        for feat in sel_feat:
            if geom == None:
                geom = feat.geometry()
            else:
                geom = geom.combine(feat.geometry())
        epsg = layer.crs().geographicCrsAuthId()[-4:]
        lyr = QgsVectorLayer(f"Polygon?crs=epsg:{epsg}", "merged", "memory")
        lyr.dataProvider().addFeatures([geom])
        return lyr

    def check_total_area_threshold(self, total_area, holder):
        minimal_bound = self.holder_total_area[holder] - (self.holder_total_area[holder] * (self.tolerance / 100))
        maximal_bound = self.holder_total_area[holder] + (self.holder_total_area[holder] * (self.tolerance / 100))
        if total_area >= minimal_bound and total_area <= maximal_bound:
            return True
        else:
            return False

    def calculate_combo_area(self, comb):
        combo = [area for key, area in self.hol_w_aea.items() if key in comb]
        list_combo = list(combo)
        temp_area = sum(list_combo)
        return temp_area

    def is_closer(self, threshold_distance, ids, seed):
        is_closer_bool = True
        for id in ids:
            distance = self.distance_matrix[seed][id]
            if distance > threshold_distance:
                is_closer_bool = False
        return is_closer_bool

    def max_distance(self, ids, seed):
        max_distance = 0
        for id in ids:
            distance = self.distance_matrix[seed][id]
            if distance > max_distance:
                max_distance = distance
        return max_distance

    def calculate_composite_number(self, seed, id):
        area = self.hol_w_aea[id]
        distance = self.distance_matrix[seed][id]
        return area*distance

    def create_merged_file(self, layer, directory):
        attribute_name = str(int(self.nholder_attribute.split('_')[0])-1) + self.nholder_attribute[1:]
        alg_params =  {
        'INPUT':layer,
        'FIELD':[attribute_name],
        'OUTPUT':'TEMPORARY_OUTPUT'
        }
        dissolved_layer = processing.run("native:dissolve",alg_params)['OUTPUT']
        alg_params = {
        'INPUT':dissolved_layer,
        'OUTPUT':'TEMPORARY_OUTPUT'
        }
        simplied_layer = processing.run("native:multiparttosingleparts", alg_params)['OUTPUT']
        simplied_layer.setName(f'{os.path.basename(layer.source())[:-4]}')
        simplied_layer.commitChanges()
        final_layer = self.create_temp_layer(simplied_layer, directory, "merged")
        return final_layer

"""
    end_point = QgsGeometry.fromPointXY(geom[start_end])
    buffer = end_point.buffer(20, 4) #Xm buffer with 4 segments
    buffer_lyr=QgsVectorLayer("Polygon?crs=epsg:28355","buffer", "memory")
    f = QgsFeature()
    f.setGeometry(buffer)
    buffer_lyr.dataProvider().addFeatures([f])
    QgsProject.instance().addMapLayer(buffer_lyr)
    
         <property name="filters">
      <set>QgsFieldProxyModel::Numeric</set>
     </property>
     
     
    buffer_lyr=QgsVectorLayer("Polygon?crs=epsg:20137","buffer", "memory")
    feat = input_layer.getSelectedFeatures()
    feat_one = [fe for fe in feat]
    geom_buffer = feat_one[0].geometry().buffer(1000,-1)
    f = QgsFeature()
    f.setGeometry(geom_buffer)
    buffer_lyr.dataProvider().addFeatures([f])
    QgsProject.instance().addMapLayer(buffer_lyr)
     
    features = input_layer.getFeatures()
    inputs = [f for f in features]
    geoms = []
    for feat in inputs:
        if feat.geometry().intersects(geom_buffer):
            f = QgsFeature()
            geomet = feat.geometry()
            f.setGeometry(geomet)
            geoms.append(f)
    for geo in geoms:
        uffer_lyr.dataProvider().addFeatures([geo])
    QgsProject.instance().addMapLayer(buffer_lyr)
    
buffer_lyr=QgsVectorLayer("Polygon?crs=epsg:20137","buffer", "memory")
feat = input_layer.getSelectedFeatures()
feat_one = [fe for fe in feat]
geom_buffer = feat_one[0].geometry().buffer(1000,-1)
f = QgsFeature()
f.setGeometry(geom_buffer)
buffer_lyr.dataProvider().addFeatures([f])
features = input_layer.getFeatures()
inputs = [f for f in features]
geoms = []
for feat in inputs:
    if feat.geometry().intersects(geom_buffer):
        f = QgsFeature()
        geomet = feat.geometry()
        f.setGeometry(geomet)
        geoms.append(f)
for geo in geoms:
    buffer_lyr.dataProvider().addFeatures([geo])
QgsProject.instance().addMapLayer(buffer_lyr)
"""